from typing import Tuple


def xgcd(a: int, b: int) -> Tuple[int, int, int]:
    """return (g, x, y) such that a*x + b*y = g = gcd(a, b)"""
    x0, x1, y0, y1 = 0, 1, 1, 0
    while a != 0:
        (q, a), b = divmod(b, a), a
        y0, y1 = y1, y0 - q * y1
        x0, x1 = x1, x0 - q * x1
    return b, x0, y0


def modinv(a: int, b: int) -> Tuple[int, int, int]:
    """return x such that (x * a) % b == 1"""
    g, x, _ = xgcd(a, b)
    if g != 1:
        raise Exception('gcd(a, b) != 1')
    return x % b


p = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171
q = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084241
N = p*q
print(N, "\n")
phi = (p-1)*(q-1)
e = 1000000000000000000000000000057
print(xgcd(e, phi), "\n")
d = modinv(e, phi)
print(d, "\n")
M = 40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
print("M = ", M, "\n")
C = pow(M, e, N)
print("C = ", C, "\n")
D = pow(C, d, N)
print("D = ", D, "\n")

R = pow(2, 1025)
(g, R_1, V_) = xgcd(R, N)
print(g, "\n", R_1, "\n", V_, "\n")

V = -V_
test = 3121748549589153507085990339243842497860593608311329790171838899343881539639126332006908179737300920446063365560644101289181797745753692267610113
T = test * test
S = (T * V) % R
M = S * (R - N) + T
U = M//R
if(U >= N):
    U = U - N
print(U, "\n")
